basePath: /api
definitions:
  entity.AuthResponse:
    properties:
      token:
        type: string
    type: object
  entity.Author:
    properties:
      full_name:
        type: string
      id:
        type: integer
    type: object
  entity.Dimension:
    properties:
      height:
        type: integer
      id:
        type: integer
      width:
        type: integer
    type: object
  entity.Genre:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  entity.Photo:
    properties:
      id:
        type: integer
      mime:
        type: string
      url:
        type: string
    type: object
  entity.PhotoDeleteResponse:
    properties:
      success:
        type: boolean
    type: object
  entity.PhotoUploadResponse:
    properties:
      id:
        type: integer
      url:
        type: string
    type: object
  entity.Picture:
    properties:
      author:
        $ref: '#/definitions/entity.Author'
      created_at:
        type: string
      dimensions:
        $ref: '#/definitions/entity.Dimension'
      gallery:
        items:
          $ref: '#/definitions/entity.Photo'
        type: array
      genre:
        $ref: '#/definitions/entity.Genre'
      id:
        type: integer
      photo:
        $ref: '#/definitions/entity.Photo'
      price:
        type: integer
      title:
        type: string
      work_technique:
        $ref: '#/definitions/entity.WorkTechnique'
    type: object
  entity.PictureCreateRequest:
    properties:
      author_id:
        type: integer
      dimensions_id:
        type: integer
      genre_id:
        type: integer
      price:
        type: integer
      title:
        type: string
      work_technique_id:
        type: integer
    required:
    - author_id
    - dimensions_id
    - genre_id
    - price
    - title
    - work_technique_id
    type: object
  entity.PictureUpdateRequest:
    properties:
      author_id:
        type: integer
      dimensions_id:
        type: integer
      genre_id:
        type: integer
      price:
        type: integer
      title:
        type: string
      work_technique_id:
        type: integer
    type: object
  entity.WorkTechnique:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  v1.doCreateAuthorRequest:
    properties:
      full_name:
        type: string
    required:
    - full_name
    type: object
  v1.doCreateDimensionRequest:
    properties:
      height:
        type: integer
      width:
        type: integer
    required:
    - height
    - width
    type: object
  v1.doCreateGenreRequest:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  v1.doCreateWorkTechniqueRequest:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  v1.doLoginRequest:
    properties:
      login:
        type: string
      password:
        type: string
    required:
    - login
    - password
    type: object
  v1.doSaveTodoRequest:
    properties:
      task:
        type: string
    required:
    - task
    type: object
  v1.response:
    properties:
      error:
        example: message
        type: string
    type: object
info:
  contact: {}
  description: beyond-limits-app
  title: alexKudryavtsev-web/beyond-limits-app
  version: "1.0"
paths:
  /admin/authors:
    post:
      consumes:
      - application/json
      description: Create new author
      operationId: create-author
      parameters:
      - description: Author full name
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/v1.doCreateAuthorRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/v1.response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.response'
      security:
      - BearerAuth: []
      summary: Create author
      tags:
      - admin
  /admin/authors/{id}:
    delete:
      consumes:
      - application/json
      description: Delete author by ID
      operationId: delete-author
      parameters:
      - description: Author ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/v1.response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.response'
      security:
      - BearerAuth: []
      summary: Delete author
      tags:
      - admin
  /admin/dimensions:
    post:
      consumes:
      - application/json
      description: Create new dimension
      operationId: create-dimension
      parameters:
      - description: Dimension width and height
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/v1.doCreateDimensionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/v1.response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.response'
      security:
      - BearerAuth: []
      summary: Create dimension
      tags:
      - admin
  /admin/dimensions/{id}:
    delete:
      consumes:
      - application/json
      description: Delete dimension by ID
      operationId: delete-dimension
      parameters:
      - description: Dimension ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/v1.response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.response'
      security:
      - BearerAuth: []
      summary: Delete dimension
      tags:
      - admin
  /admin/genres:
    post:
      consumes:
      - application/json
      description: Create new genre
      operationId: create-genre
      parameters:
      - description: Genre name
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/v1.doCreateGenreRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/v1.response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.response'
      security:
      - BearerAuth: []
      summary: Create genre
      tags:
      - admin
  /admin/genres/{id}:
    delete:
      consumes:
      - application/json
      description: Delete genre by ID
      operationId: delete-genre
      parameters:
      - description: Genre ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/v1.response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.response'
      security:
      - BearerAuth: []
      summary: Delete genre
      tags:
      - admin
  /admin/login:
    post:
      consumes:
      - application/json
      description: Login admin
      operationId: admin-login
      parameters:
      - description: Login and password
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/v1.doLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/v1.response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.response'
      summary: Admin login
      tags:
      - auth
  /admin/pictures:
    post:
      consumes:
      - application/json
      description: Create new picture (without photos)
      operationId: create-picture
      parameters:
      - description: Picture data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entity.PictureCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/v1.response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.response'
      security:
      - BearerAuth: []
      summary: Create picture
      tags:
      - admin
  /admin/pictures/{id}:
    delete:
      consumes:
      - application/json
      description: Delete picture by ID
      operationId: delete-picture
      parameters:
      - description: Picture ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/v1.response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.response'
      security:
      - BearerAuth: []
      summary: Delete picture
      tags:
      - admin
    patch:
      consumes:
      - application/json
      description: Update picture data
      operationId: update-picture
      parameters:
      - description: Picture ID
        in: path
        name: id
        required: true
        type: integer
      - description: Picture data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entity.PictureUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/v1.response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.response'
      security:
      - BearerAuth: []
      summary: Update picture
      tags:
      - admin
  /admin/pictures/{id}/gallery:
    post:
      consumes:
      - multipart/form-data
      description: Upload photo to picture gallery
      operationId: upload-gallery-photo
      parameters:
      - description: Picture ID
        in: path
        name: id
        required: true
        type: integer
      - description: Image file
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.PhotoUploadResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/v1.response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.response'
      security:
      - BearerAuth: []
      summary: Upload gallery photo
      tags:
      - admin
  /admin/pictures/{id}/gallery/{photo_id}:
    delete:
      consumes:
      - application/json
      description: Delete photo from picture gallery
      operationId: delete-gallery-photo
      parameters:
      - description: Picture ID
        in: path
        name: id
        required: true
        type: integer
      - description: Photo ID
        in: path
        name: photo_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.PhotoDeleteResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/v1.response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.response'
      security:
      - BearerAuth: []
      summary: Delete gallery photo
      tags:
      - admin
  /admin/pictures/{id}/photo:
    post:
      consumes:
      - multipart/form-data
      description: Upload main photo for picture
      operationId: upload-main-photo
      parameters:
      - description: Picture ID
        in: path
        name: id
        required: true
        type: integer
      - description: Image file
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.PhotoUploadResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/v1.response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.response'
      security:
      - BearerAuth: []
      summary: Upload main photo
      tags:
      - admin
  /admin/work-techniques:
    post:
      consumes:
      - application/json
      description: Create new work technique
      operationId: create-work-technique
      parameters:
      - description: Work technique name
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/v1.doCreateWorkTechniqueRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/v1.response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.response'
      security:
      - BearerAuth: []
      summary: Create work technique
      tags:
      - admin
  /admin/work-techniques/{id}:
    delete:
      consumes:
      - application/json
      description: Delete work technique by ID
      operationId: delete-work-technique
      parameters:
      - description: Work technique ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/v1.response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.response'
      security:
      - BearerAuth: []
      summary: Delete work technique
      tags:
      - admin
  /authors:
    get:
      consumes:
      - application/json
      description: Get all authors
      operationId: get-authors
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Author'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.response'
      summary: Get authors
      tags:
      - references
  /dimensions:
    get:
      consumes:
      - application/json
      description: Get all dimensions
      operationId: get-dimensions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Dimension'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.response'
      summary: Get dimensions
      tags:
      - references
  /genres:
    get:
      consumes:
      - application/json
      description: Get all genres
      operationId: get-genres
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Genre'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.response'
      summary: Get genres
      tags:
      - references
  /healthz:
    get:
      operationId: healthz
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
      summary: Check server healthz
      tags:
      - common
  /pictures:
    get:
      consumes:
      - application/json
      description: Get all pictures
      operationId: get-pictures
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Picture'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.response'
      summary: Get pictures
      tags:
      - pictures
  /pictures/{id}:
    get:
      consumes:
      - application/json
      description: Get picture by ID
      operationId: get-picture-by-id
      parameters:
      - description: Picture ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Picture'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.response'
      summary: Get picture by ID
      tags:
      - pictures
  /todos:
    post:
      consumes:
      - application/json
      description: Create todo
      operationId: create-todo
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/v1.doSaveTodoRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
      summary: Create todo
      tags:
      - todos
  /todos/:
    get:
      consumes:
      - application/json
      description: Get all todos
      operationId: get-all-todos
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
      summary: Get all toos
      tags:
      - todos
  /todos/{id}:
    get:
      consumes:
      - application/json
      description: Get todo by id
      operationId: get-todo-by-id
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get todo by id
      tags:
      - todos
  /work-techniques:
    get:
      consumes:
      - application/json
      description: Get all work techniques
      operationId: get-work-techniques
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.WorkTechnique'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.response'
      summary: Get work techniques
      tags:
      - references
schemes:
- https
- http
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
